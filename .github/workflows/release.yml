name: Release and Publish Extension

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '0.1.0'
      publish_marketplace:
        description: 'Publish to VS Code Marketplace'
        type: boolean
        default: true

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile TypeScript
      run: npm run compile
      
    - name: Install VSCE
      run: npm install -g @vscode/vsce
      
    - name: Extract version from tag (for tag-based releases)
      if: startsWith(github.ref, 'refs/tags/v')
      id: tag-version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Update package.json version to match tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: npm version ${{ steps.tag-version.outputs.version }} --no-git-tag-version
      
    - name: Update version in package.json (manual trigger)
      if: github.event.inputs.version
      run: npm version ${{ github.event.inputs.version }} --no-git-tag-version
      
    - name: Get version from package.json
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Package extension
      run: vsce package
      
    - name: Get package filename
      id: package-file
      run: echo "filename=$(ls *.vsix)" >> $GITHUB_OUTPUT
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || format('v{0}', steps.package-version.outputs.version) }}
        name: PowerWorld Language Support v${{ steps.package-version.outputs.version }}
        body: |
          ## PowerWorld Language Support Extension v${{ steps.package-version.outputs.version }}
          
          ### ðŸš€ Features
          - **Syntax Highlighting**: Complete syntax highlighting for PowerWorld .aux files
          - **IntelliSense**: Auto-completion for 200+ PowerWorld functions and keywords
          - **Special Keywords**: Support for @ keywords (@BUILDDATE, @CASEFILENAME, etc.) with green highlighting
          - **Field Validation**: Real-time validation of data block fields with error detection
          - **SUBDATA Support**: Proper handling and validation of SUBDATA blocks
          - **Hover Documentation**: Detailed information when hovering over functions and fields
          - **Code Folding**: Collapse SCRIPT blocks and data sections
          - **Document Symbols**: Navigate through SCRIPT blocks in the outline view
          
          ### ðŸ“¦ Installation
          
          #### Option 1: From VS Code Marketplace (Recommended)
          1. Open VS Code
          2. Go to Extensions (Ctrl+Shift+X)
          3. Search for "PowerWorld Language Support"
          4. Click Install
          
          #### Option 2: Manual Installation
          1. Download the `.vsix` file from this release
          2. Open VS Code
          3. Run command: `Extensions: Install from VSIX...`
          4. Select the downloaded `.vsix` file
          
          ### ðŸŽ¯ Usage
          - Open any `.aux` file in VS Code
          - The extension automatically activates
          - Start typing PowerWorld commands to see IntelliSense suggestions
          - Type `@` to see special keyword completions
          - Hover over functions for documentation
          
          ### ðŸ”§ Requirements
          - Visual Studio Code 1.74.0 or higher
          
          ---
          
          **Full Changelog**: https://github.com/eric-bahr/vscode-powerworld/commits/v${{ steps.package-version.outputs.version }}
        files: |
          ${{ steps.package-file.outputs.filename }}
        draft: false
        prerelease: false
        
    - name: Publish to VS Code Marketplace
      if: github.event.inputs.publish_marketplace != 'false'
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
      run: vsce publish --packagePath ${{ steps.package-file.outputs.filename }}
      
    - name: Publish to Open VSX Registry
      if: github.event.inputs.publish_marketplace != 'false'
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}
      run: |
        npm install -g ovsx
        ovsx publish ${{ steps.package-file.outputs.filename }} -p $OVSX_PAT
