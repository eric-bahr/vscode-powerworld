name: Release and Publish Extension

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '0.1.0'
      publish_marketplace:
        description: 'Publish to VS Code Marketplace'
        type: boolean
        default: true

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile TypeScript
      run: npm run compile
      
    - name: Install VSCE
      run: npm install -g @vscode/vsce@latest
      
    - name: Extract version from tag (for tag-based releases)
      if: startsWith(github.ref, 'refs/tags/v')
      id: tag-version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Update package.json version to match tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: npm version ${{ steps.tag-version.outputs.version }} --no-git-tag-version
      
    - name: Update version in package.json (manual trigger)
      if: github.event.inputs.version
      run: npm version ${{ github.event.inputs.version }} --no-git-tag-version
      
    - name: Get version from package.json
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
    - name: Package extension
      run: vsce package
      
    - name: Get package filename
      id: package-file
      run: echo "filename=$(ls *.vsix)" >> $GITHUB_OUTPUT
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || format('v{0}', steps.package-version.outputs.version) }}
        name: PowerWorld Language Support v${{ steps.package-version.outputs.version }}
        body: |
          ## PowerWorld Language Support Extension v${{ steps.package-version.outputs.version }}
          
          üéâ **Initial Release** - Complete language support for PowerWorld auxiliary (.aux) files!
          
          ### ‚ú® What's New in This Release
          
          #### ÔøΩ **Core Language Features**
          - **Syntax Highlighting**: Full TextMate grammar with PowerWorld-specific colorization
          - **Error Detection**: Real-time validation with smart error reporting
          - **Hover Documentation**: Contextual help when hovering over functions
          - **Code Navigation**: Document outline and symbol provider for SCRIPT blocks
          
          #### üåü **PowerWorld-Specific Features**
          - **@ Keywords Support**: Special highlighting and completion for `@BUILDDATE`, `@CASEFILENAME`, `@VERSION`, etc.
          - **SUBDATA Intelligence**: Proper validation that ignores content within `<SUBDATA>` blocks
          - **Field Validation**: Context-aware validation for data block fields and parameters
          - **Script Block Support**: Folding, outlining, and navigation for SCRIPT sections
          
          #### üêõ **Bug Fixes & Improvements**
          - Fixed duplicate @ symbol insertion in autocompletion
          - Resolved SUBDATA validation false positives
          - Improved error handling for malformed aux files
          - Enhanced completion accuracy for function parameters
          
          #### üî® **Development Infrastructure**
          - Automated CI/CD pipeline with GitHub Actions
          - Cross-platform build support (Windows/macOS/Linux)
          - Comprehensive testing and validation workflow
          - Professional extension packaging and distribution
          
          ### üì¶ Installation
          
          #### Option 1: VS Code Marketplace
          1. Open VS Code
          2. Go to Extensions (Ctrl+Shift+X)
          3. Search for "PowerWorld Language Support"
          4. Click Install
          
          #### Option 2: Manual Installation
          1. Download the `.vsix` file below
          2. In VS Code: `Extensions: Install from VSIX...`
          3. Select the downloaded file
          
          ### üöÄ Getting Started
          1. Open any `.aux` file in VS Code
          2. The extension activates automatically
          3. Start typing PowerWorld commands for IntelliSense
          4. Type `@` to see special keyword completions
          5. Hover over functions for documentation
          
          ### üéØ Supported File Types
          - `.aux` - PowerWorld auxiliary files
          - Automatic language detection and activation
          
          ### üí° Pro Tips
          - Use Ctrl+Space to trigger completions manually
          - Hover over functions to see parameter documentation
          - Use the outline view to navigate large SCRIPT blocks
          - The extension respects SUBDATA boundaries for accurate validation
          
          ### üîß Requirements
          - Visual Studio Code 1.74.0 or higher
          - Works on Windows, macOS, and Linux
          
          ---
          
          **Full Changelog**: https://github.com/eric-bahr/vscode-powerworld/commits/v${{ steps.package-version.outputs.version }}
        files: |
          ${{ steps.package-file.outputs.filename }}
        draft: false
        prerelease: false
        
    - name: Publish to VS Code Marketplace
      if: github.event.inputs.publish_marketplace != 'false'
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
      run: vsce publish --packagePath ${{ steps.package-file.outputs.filename }}
      
    - name: Publish to Open VSX Registry
      if: github.event.inputs.publish_marketplace != 'false'
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}
      run: |
        if [ -n "$OVSX_PAT" ]; then
          npm install -g ovsx
          ovsx publish ${{ steps.package-file.outputs.filename }} -p $OVSX_PAT
        else
          echo "OVSX_PAT not set, skipping Open VSX publishing"
        fi
